using Mutagen.Bethesda;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Synthesis;

namespace TMPatcher
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IOblivionMod, IOblivionModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.Oblivion, "TMPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            Console.WriteLine("\n\nRunPatch`Open\n");
            Console.WriteLine($"Settings.FeatureGuaranteeOneIngredientEffect:{Settings.FeatureGuaranteeOneIngredientEffect}");
            // FeatureGuaranteeOneIngredientEffect
            if (Settings.FeatureGuaranteeOneIngredientEffect)
            {
                // TODO: Find a better way to get an effect.
                Effect? nullableEffect = null;
                Console.WriteLine($"state.LoadOrder.PriorityOrder.WinningOverrides<Ingredient>():{state.LoadOrder.PriorityOrder.WinningOverrides<Ingredient>().Count()}");
                foreach (var ingredient in state.LoadOrder.PriorityOrder.WinningOverrides<Ingredient>())
                {
                    try
                    {
                        Console.WriteLine("Before getting effect.");
                        nullableEffect = ingredient.Effects.First();
                        Console.WriteLine("After getting effect.");
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Couldn't get effect from ingredient.");
                    }
                }
                var effect = nullableEffect!;
                
                foreach (var oldIngredient in state.LoadOrder.PriorityOrder.WinningOverrides<Ingredient>())
                {
                    try
                    {
                        if (oldIngredient.Effects.Count > 0)
                        {
                            Console.WriteLine("Skipping ingredient because Count > 0");
                            continue;
                        }

                        var newIngredient = oldIngredient.DeepCopy();
                        newIngredient.Effects.Add(effect);
                        state.PatchMod.Ingredients.Set(newIngredient);
                        Console.WriteLine($"Successfully modified ingredient. EditorID:{newIngredient.EditorID} Name:{newIngredient.Name}");
                        // if (oldNpc.Stats?.Speed == null || oldNpc.EditorID == null)
                        //     continue;
                        //
                        // var newNpc = oldNpc.DeepCopy();
                        //
                        // if (Settings.NpcBlacklist.Contains(newNpc))
                        //     Console.WriteLine($"Found NpcBlacklist EditorID:{oldNpc.EditorID} Name:{oldNpc.Name} id:{oldNpc.FormKey.ModKey.FileName}`{oldNpc.FormKey.IDString()}");
                        //
                        // if (newNpc.Stats?.Speed == null || newNpc.Stats.Speed <= 1)
                        //     continue;
                        //
                        // newNpc.Stats.Speed = (byte)CalcSpeed(newNpc.Stats.Speed);
                        //
                        // state.PatchMod.Npcs.Set(newNpc);
                        // Console.WriteLine($"Successfully modified npc. EditorID:{newNpc.EditorID} Name:{newNpc.Name}");
                        // ++count;
                        // Console.WriteLine($"\tOldSpeed:{oldNpc.Stats.Speed} NewSpeed:{newNpc.Stats.Speed}\n");
                    }
                    catch (Exception ex)
                    {
                        throw RecordException.Enrich(ex, oldIngredient);
                    }
                }
            }
            Console.WriteLine("\n\nRunPatch`Close\n");
        }
    }
}
